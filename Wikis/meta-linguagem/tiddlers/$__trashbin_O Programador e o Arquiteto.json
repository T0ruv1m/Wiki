{
    "created": "20241210011618381",
    "modified": "20241210011623609",
    "text": "Uma parte integral de qualquer método são as ferramentas que ele utiliza. E todos podem notar que, atualmente, a maior parte do trabalho arquitetônico é realizada por meio de softwares. Isso significa que as ferramentas utilizadas pelos arquitetos foram projetadas por engenheiros de software.\nQuerendo ou nao, isso acaba por determinar grande parte do que somos capazes de fazer e de como pensamos sobre projetar. Sendo eles os criadores de nossas ferramentas, os programadores tornam-se, de repente, figuras relevantes para os arquitetos contemporâneos. Considero então interessante explorar as semelhanças e diferenças entre essas profissões.\n\nA engenharia de software, tendo nascido no século passado, é ainda um bebê se comparado ao tempo de vida da Arquitetura como disciplina. Essa nova profissão, mesmo no seu curto período de vida, ja sofreu com a tentativa de se adequar aos métodos de trabalho derivados de outras profissões.\n\nJustamente por ser tão recente, uma mesma geração de programadores conseguiu presenciar a perda em eficiência e qualidade gerada pela transição da forma mais informal e direta de trabalho, característica dos primórdios da disciplina, para métodos rígidos e burocráticos como o chamado \"Modelo em Cascata\".\n\nEm meio a pressão por resultados e a observada ineficiência dos métodos recentemente empregados,  esses profissionais aprenderam, da forma mais difícil, que teriam mais sucesso entendendo o design como um processo dinâmico e de reajustes constantes, e não uma cascata de decisões e estágios totalmente independentes e sequênciais, como é por exemplo o modus operandi dos arquitetos.\n\nEm meio a essa situação emergiram figuras que protestaram em busca de melhores condições de trabalho e revisões metodológicas, um desses protestos resultou no \"Manifesto AGILE\". A lição aprendida nesse período foi tão profunda que hoje  \"Metodologia Ágil\" é amplamente aplicada no mercado. Ela se opõe fortemente ao que chamam de \"Big Design Upfront\" (Grande Planejamento Antecipado). No Manifesto Ágil, publicado e assinado por diversos programadores importantes, eles afirmam o seguinte:\n\n>\"Estamos descobrindo melhores maneiras de desenvolver software, fazendo-o nós mesmos e ajudando outros a fazê-lo. Através deste trabalho, passamos a valorizar:\n\n>* Indivíduos e interações mais que processos e ferramentas;\n>* Software em funcionamento mais que documentação abrangente;\n>* Colaboração com o cliente mais que negociação de contratos;\n>* Responder a mudanças mais que seguir um plano.\n\n>Ou seja, embora haja valor nos itens à direita, valorizamos mais os itens à esquerda.\" (Manifesto Ágil, 2001).\n\nO que muitos não sabem é que os signatários desse manifesto foram fortemente influenciados por [[Christopher Alexander]], incluindo [[Ward Cunningham]] e [[A Gangue dos Quatro]], que são citados nesse trabalho. Essa metodologia se baseia na ideia de [[Crescimento Gradual]], proposta por Alexander, que na época tentava convencer seus colegas arquitetos da mesma coisa: que teríamos mais sucesso trabalhando por meio de iterações constantes e espaçadas ao longo do tempo, ao invés de um planejamento rígido e definido desde o início.\n\nReforçamos que a ideia central em ambos os casos é a de que, apenas partindo de uma concepção inicial do todo e, em seguida, ajustando-a gradualmente, torna-se possível alcançar resultados precisos e satisfatórios. O processo de tentativa e erro revela as condições de melhoria, algo que o design estático não consegue prever adequadamente.\n\nSofwares e construções são, entretanto, coisas muito diferentes. O mundo do software tem a vantagem de ser virtual, de lidar com produtos efêmeros e sem peso físico, os chamados programas de computador. Reformas em programas são mais baratas e não geram resíduos. Tudo o que um programador faz ocorre em um meio maleável, sem decisões \"concretas\" no sentido literal. Isso torna a adaptabilidade muito mais fácil, mas isso não é suficiente para dizer que que edificações não deveriam buscar ser também entidades adaptáveis.\n\nTalvez pensando nisso, as ferramentas virtuais de planejamento tentem simular esse ambiente fluido, mas, como o estudioso de sistemas (Gall, 2018) nos diz [[Novos Sistemas Significam Novos Problemas]]: as simulações por computador, por serem tão abstratas e dissociadas do mundo, falham em fornecer tudo o que um arquiteto precisa para trabalhar.\n\nEscritores, programadores, designers gráficos ou pintores, ao usar o computador, estão definitivamente mais próximos da \"coisa real\", ou seja, do meio de seu trabalho. Já o arquiteto age como se fosse apenas mais uma dessas profissões enquanto, na verdade, seu trabalho é de uma natureza inteiramente diferente. Ao invés de nos colocarmos em contato direto com o produto criado, trabalhamos exclusivamente nesses modelos e desenhos que impõem descritivamente como a edificação vai ser concebida em um passo posterior e distante. É nesse momento onde toda a adaptabilidade das estruturas físicas vai por água abaixo.\n\nSe reinterpretarmos o arquiteto como alguém que simplesmente produz desenhos no computador, então pode-se dizer que ele está sim cumprindo seu papel adequadamente. Contudo, ao adotarmos a concepção mais ampla de que o arquiteto cria edifícios, torna-se evidente o quanto essas abstrações nos distanciam de nosso verdadeiro ambiente criativo. Somente com essa mudança de perspectiva, podemos criticar as ferramentas que usamos, compreender por que frequentemente falhamos em entregar bons resultados e com isso buscar formas melhores de trabalhar.\n\nUma extensão a esse pensamento está em: [[Crítica ao Design auxiliado por Computadores]]\n\nChristopher Alexander percebeu isso e dedicou grande parte de sua carreira a tentar fazer as pessoas notarem o problema criado por essa forma relativamente recente de conceber construções. Ele buscou, ao longo de sua carreira, encontrar novas formas de trabalho que entregassem resultados confiáveis e de qualidade.\n\n>\"A ideia de que podemos chegar a um edifício usando desenhos é uma ficção. Por favor, acreditem, é uma ficção.\" [...] Maior parte do meu trabalho é tentar encontrar alternativas modernas para fazer essa coisa direito. Isso envolve muitas coisas, envolve uma grande quantidade de trabalho juntamente com as pessoas para as quais as construções são feitas, envolve um processo mais lento com o terreno e, é claro, envolve a integração completa das atividades de design, construção e monetização.(tradução nossa)\n(Alexander, disponível em: https://youtu.be/a8wPKso-J4A).\n\nAcreditamos que o trabalho de Alexander foi tão frutífero no campo do desenvolvimento de software justamente por conta de sua filosofia conversar tão bem com a intuição humana mais primitiva de como fazer as coisas. A minha hipótese é a de que os programadores foram os primeiros as notarem isso devido ao fato de que essas metodologias que já dominava a maioria das profissões ainda não tinham sido consolidadas dentro dessa nova cultura.\n\nTalvez chegue o período em que nova geração de arquitetos se posicione para  reavaliar os métodos e mudar a natureza da profissão, assim como fizeram os desenvolvedores de software ao ouvirem as palavras de um arquiteto revoltado. Ou, talvez, a solução tenha de vir de fora, de alguma revolução tecnológica possibilitada pelas IAs ou pelo surgimento de outra disciplina completamente nova.\n\n<footer>\n\n1.AGILE Manifesto. Manifesto for Agile Software Development. Disponível em: https://agilemanifesto.org/. Acesso em: 08 dez. 2024.\n\n2.<<twb>>\n\n3.ALEXANDER, Christopher. Vídeo: ''Christopher Alexander Lecture 1995 London''. Disponível em: https://youtu.be/a8wPKso-J4A. Acesso em: 08 dez. 2024.",
    "title": "O Programador e o Arquiteto",
    "tmap.id": "e5003a56-5345-4292-98b1-4c884b51e220"
}